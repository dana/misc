#!/home/dana/perl5/perlbrew/perls/perl-5.14.0/bin/perl

use common::sense;
use Moose::Autobox;
use XML::Simple;
use Compress::Zlib;
use File::Slurp;
use Digest::MD5 qw(md5_hex);

my $gnu_cash_dir = '/home/dana/Dropbox/GnuCash/';
die "This program can not run while GnuCash itself if running\n"
    if -e $gnu_cash_dir . '/gnucash_main.gnucash.LCK';

my $gnu_cash_file = "$gnu_cash_dir/gnucash_main.gnucash";
my $xml = Compress::Zlib::memGunzip(read_file($gnu_cash_file));
my $book = XMLin($xml);
my $accounts = [];
$book->{'gnc:book'}->{'gnc:account'}->map(sub {
    $accounts->push({
        name => $_->{'act:name'},
        id => $_->{'act:id'}->{content},
        desc => $_->{'act:description'},
        type => $_->{'act:type'},
    });
});
my $get_accounts = sub {
    my $name = shift or return 0;
    my $returns = [];
    $accounts->map(sub {
        $returns->push($_) if $_->{name} =~ /^$name/;
    });
    if(not $returns->length) {
        $accounts->map(sub {
            $returns->push($_) if $_->{name} =~ /$name/;
        });
    }
    return $returns;
};

my $dests = {};
$dests->{from} = $get_accounts->(shift) or die "first argument is source account\n";
$dests->{to} = $get_accounts->(shift) or die "second argument is destination account\n";
my $description = shift or die "third argument must be a transaction description\n";
['from','to']->map(sub {
    my $a = $_;
    if($dests->{$a}->length > 1) {
        say "multiple '$a' accounts match:";
        $dests->{$a}->map(sub {
            say "   $_->{name}";
        });
        exit;
    }
    $dests->{$a} = $dests->{$a}->pop;
});
say 'From: ' . $dests->{from}->dump;
say 'To: ' . $dests->{to}->dump;
say $description;
print 'Enter number of pennies to transfer: ';
my $amount = <>;
chomp $amount;
die "amount must not be blank or zero\n" unless $amount;
die "amount must be a positive integer\n" unless $amount =~ /^\d+$/;
my $get_guid = sub {
    return md5_hex join ' ', stat($gnu_cash_file), $$, time, rand(102400);
};
my $new;
{   my $new_guid = $get_guid->();
    my $quantity = $amount . '/100';
    my ($sec, $min, $hour, $mday, $mon, $year) = localtime(time);
    $year += 1900; #y2k, not today!
    $mon++;
    my $date = sprintf('%.4d-%.2d-%.2d', $year, $mon, $mday);
    my $time = sprintf('%s %.2d:%.2d:%.2d -0700', $date, $hour, $min, $sec);
    say $date;
    say $time;
    my $g1 = $get_guid->();
    my $g2 = $get_guid->();
    my $g3 = $get_guid->();
    $new = qq<gnc:transaction version="2.0.0">
  <trn:id type="guid">$g1</trn:id>
  <trn:currency>
    <cmdty:space>ISO4217</cmdty:space>
    <cmdty:id>USD</cmdty:id>
  </trn:currency>
  <trn:date-posted>
    <ts:date>$date 00:00:00 -0700</ts:date>
  </trn:date-posted>
  <trn:date-entered>
    <ts:date>$time</ts:date>
  </trn:date-entered>
  <trn:description>$description</trn:description>
  <trn:slots>
    <slot>
      <slot:key>date-posted</slot:key>
      <slot:value type="gdate">
        <gdate>$date</gdate>
      </slot:value>
    </slot>
  </trn:slots>
  <trn:splits>
    <trn:split>
      <split:id type="guid">$g2</split:id>
      <split:reconciled-state>n</split:reconciled-state>
      <split:value>$quantity</split:value>
      <split:quantity>$quantity</split:quantity>
      <split:account type="guid">$dests->{to}->{id}</split:account>
    </trn:split>
    <trn:split>
      <split:id type="guid">$g3</split:id>
      <split:reconciled-state>n</split:reconciled-state>
      <split:value>-$quantity</split:value>
      <split:quantity>-$quantity</split:quantity>
      <split:account type="guid">$dests->{from}->{id}</split:account>
    </trn:split>
  </trn:splits>
</gnc:transaction>
;
}
say $new->dump;
#finally modify the XML
$xml =~ s/\<\/gnc:transaction\>\n\<\/gnc:book\>/\<\/gnc:transaction\>\n$new\<\/gnc:book\>/m;
my $newfile = $gnu_cash_file . '.new';
open my $fh, '>', $newfile;
print $fh $xml;
close $fh;
system "gzip $newfile";
my $gz = $newfile . '.gz';
rename $gz, $gnu_cash_file;
