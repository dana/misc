#!/home/dana/perl5/perlbrew/perls/perl-5.14.0/bin/perl

use common::sense;
use Moose::Autobox;
use XML::Simple;
use Compress::Zlib;
use File::Slurp;
use Digest::MD5 qw(md5_hex);

my $gnu_cash_file = '/home/dana/Dropbox/GnuCash/gnucash_main.gnucash';
my $book;
{   my $compressed_xml = read_file($gnu_cash_file);
    my $xml = Compress::Zlib::memGunzip($compressed_xml);
    $book = XMLin($xml);
}
my $accounts = [];
$book->{'gnc:book'}->{'gnc:account'}->map(sub {
    $accounts->push({
        name => $_->{'act:name'},
        id => $_->{'act:id'}->{content},
        desc => $_->{'act:description'},
        type => $_->{'act:type'},
    });
});
my $get_accounts = sub {
    my $name = shift or return 0;
    my $returns = [];
    $accounts->map(sub {
        $returns->push($_) if $_->{name} =~ /^$name/;
    });
    if(not $returns->length) {
        $accounts->map(sub {
            $returns->push($_) if $_->{name} =~ /$name/;
        });
    }
    return $returns;
};

my $dests = {};
$dests->{from} = $get_accounts->(shift) or die "first argument is source account\n";
$dests->{to} = $get_accounts->(shift) or die "second argument is destination account\n";
my $description = shift or die "third argument must be a transaction description\n";
['from','to']->map(sub {
    my $a = $_;
    if($dests->{$a}->length > 1) {
        say "multiple '$a' accounts match:";
        $dests->{$a}->map(sub {
            say "   $_->{name}";
        });
        exit;
    }
    $dests->{$a} = $dests->{$a}->pop;
});
say 'From: ' . $dests->{from}->dump;
say 'To: ' . $dests->{to}->dump;
say $description;
print 'Enter number of pennies to transfer: ';
my $amount = <>;
chomp $amount;
die "amount must not be blank or zero\n" unless $amount;
die "amount must be a positive integer\n" unless $amount =~ /^\d+$/;
my $get_guid = sub {
    return md5_hex join ' ', stat($gnu_cash_file), $$, time, rand(102400);
};
my $new;
{   my $new_guid = $get_guid->();
    my $quantity = $amount . '/100';
    my ($sec, $min, $hour, $mday, $mon, $year) = localtime(time);
    $year += 1900; #y2k, not today!
    $mon++;
    my $date = sprintf('%.4d-%.2d-%.2d', $year, $mon, $mday);
    my $time = sprintf('%s %.2d:%.2d:%.2d -0700', $date, $hour, $min, $sec);
    say $date;
    say $time;
    $new = {
        'trn:date-entered' => {
            'ts:date' => $time,
        },
        version => '2.0.0',
        'trn:splits' => {
            'trn:split' => [
                {   'split:account' => {
                        content => $dests->{to}->{id},
                        type => 'guid',
                    },
                    'split:quantity' => $quantity,
                    'split:value' => $quantity,
                    'split:reconciled-state' => 'n',
                    'split:id' => {
                        content => $get_guid->(),
                        type => 'guid',
                    }
                },{ 'split:account' => {
                        content => $dests->{from}->{id},
                        type => 'guid',
                    },
                    'split:quantity' => '-' . $quantity,
                    'split:value' => '-' . $quantity,
                    'split:reconciled-state' => 'n',
                    'split:id' => {
                        content => $get_guid->(),
                        type => 'guid',
                    }
                }
            ]
        },
        'trn:id' => {
            content => $get_guid->(),
            type => 'guid',
        },
        'trn:currency' => {
            'cmdty:space' => 'ISO4217',
            'cmdty:id' => 'USD'
        },
        'trn:date-posted' => {
            'ts:date' => $date . ' 00:00:00 -0700',
        },
        'trn:slots' => {
            'slot' => {
                'slot:value' => {
                    'gdate' => $date,
                    'type' => 'gdate',
                },
                'slot:key' => 'date-posted',
            },
        },
        'trn:description' => $description,
    };
}
say $new->dump;
#finally modify the XML
$book->{'gnc:book'}->{'gnc:transaction'}->push($new);
my $newfile = $gnu_cash_file . '.new';
open my $fh, '>', $newfile;
print $fh XMLout($book);
close $fh;
system "gzip $newfile";
my $gz = $newfile . '.gz';
#rename $gz, $gnu_cash_file;
__END__
gnucash_main.gnucash.LCK
gnucash_main.gnucash.7f0101.25242.LNK

gnucash_main.gnucash
$VAR1 = {
   'gnc:book' => {
      'gnc:account' => [
           'act:name' => 'some kinda bank',
           'act:id' => {
              'content' => 'aede84185ee50cfb9d0dde5daf6a898e',
                            acbd18db4cc2f85cedef654fccc4a4d8
              'type' => 'guid'
              },
           'act:type' => 'BANK',
           'act:description' => 'Checking Account',

use Digest::MD5 qw(md5_hex);

